I need to you to help me with a project. It is a website for the teaching practice elective. It will ideally have four types of actors: faculty teachers, highschool teachers, faculty students and an admin. This web app should behave differently according to the type of user using it. In essence, the highschool teachers should be able to input their classes where they can have faculty students attend. Then the faculty students will see these classes and choose to attend them or not. The classes will have a limited number of participants. Faculty students will get to participate on "first come, first served" basis. 

For the other two actors they should be able to:
- if they are a faculty teacher - choose to attend at the end of the year to some classes for a final assesment
- if they are an admin - do some admin stuff, such as creating groups of faculty students which will be mentored by one highschool teacher

Another thing this app should be able to do is generate a report, I am not sure if it's a monthly report or after each class, but there is one the teacher will complete and another which the student will complete. This report basically specifies what was done during the class and I think it also provides proof of attendance.

It might be usefull for you to be aware of the two reports/ anexes that need to be generated by the web app. I will provide you versions in both the original language(romanian) and a translated one in english. The app itself will be in romanian but I prefer talking with you in english and writing everything development related in english.

Annex 2 (English Version)

MONTHLY RECORD SHEET for practical training during initial teacher education

Student: ..........................................................................

University: .....................................................................

Faculty: ...........................................................................

Specialization: ..................................................................

Year of study: .............., Group: ...................................

Phone: ...................., E-mail: .....................................

Pre-university education institution: ................../Locality: ............................

Address: ............................................................................

Phone: ............, Fax: ........, E-mail: ..........................

Means of transport: ..................................................

| Date | Hours | Types of Teaching Activities |
| | |------------------------------------------------------------------------------|

Assistance	Teaching Project	Practical Teaching Hours	Portfolio	Workshop/Seminar	Extracurricular Activities
Mentor Teacher:
..................................

Practical Pedagogical Advisor:
..................................

Director:
..................................

Dean:
..................................

Anexa 2 (Romanian Version)

FIȘA DE EVIDENȚĂ LUNARĂ a pregătirii practice pe perioada formării inițiale pentru profesia didactică

Studentul(a): ..........................................................................

Universitatea: .....................................................................

Facultatea: ...........................................................................

Specialitatea: ......................................................................

Anul de studii: .............., Grupa: ...................................

Telefon: ...................., E-mail: .....................................

Unitatea de învățământ preuniversitar: ................../Localitatea: ............................

Adresa: ............................................................................

Telefon: ............, Fax: ........, E-mail: ..........................

Mijloace de transport: ..................................................

| Data | Orele | Tipuri de activități didactice |
| | |----------------------------------------------------------------------------------|

Asistență	Proiect didactic	Susținerea practică a orelor	Portofoliu	Cerc/Atelier de lucru	Activități extrașcolare
Profesor mentor:
..................................

Îndrumător practică pedagogică:
..................................

Director:
..................................

Decan:
..................................





This was the first annex, here is the second one:

Anexa 3

FIȘA DE EVIDENȚĂ LUNARĂ a activității didactice pe perioada formării inițiale pentru profesia didactică

Aprobat de:

Decan:
..................................

Doamna/Domnul ........................, vechimea în învățământ ............, gradul didactic ............, a efectuat în luna .........., anul școlar ........., disciplina ............, următoarele activități didactice pe perioada pregătirii practice din cadrul formării inițiale pentru profesia didactică:

Nr. crt.	Student	Anul de studii	Grupa	Data	Orele - asistență/de lecție/susținerea practică	Proiect didactic	Portofoliu	Cerc/Atelier de lucru	Activități extrașcolare
Directorul unității de învățământ preuniversitar:
..................................

Profesor mentor:
..................................

Secretar:
..................................


Annex 3

MONTHLY RECORD SHEET of teaching activities during initial teacher training

Approved by:

Dean:
..................................

Mr./Mrs. ........................, with ............ years of teaching experience, teaching qualification ............, carried out the following teaching activities in the month of .........., school year ........., subject ............, during the practical training within the initial teacher education:

No.	Student	Year of Study	Group	Date	Hours - Assistance/Lecture/Practical Support	Teaching Project	Portfolio	Workshop/Seminar	Extracurricular Activities
Director of the pre-university education institution:
..................................

Mentor Teacher:
..................................

Secretary:
..................................



I'm going to use the term "super user" refering to an actor, either the admin or a teacher, who can create a class group and assign students to them. How would including the super user functionality affect the database schema design?

If I want to add a password reset functionality, would that require changing the database schema?

The way classes are currently shown in my frontend is by showing a list of all classes. Ideally I would also like to be able to show the classes in a calendar form, let's say like in google calendar or microsoft outlook. With each class appearing at a specific hour, in a specific day, in a week long calendar view. Would this feature require modifying the database schema?


I would also ideally like to add a private chat functionality and group chat functionality(each group of students mentored by one teacher will have a chat with the respective students and the teacher). How would should the database be modified in order to accomodate this feature?


Below is a comprehensive SQL schema that includes tables for users, user groups, permissions, classes, schedules, reports, and the chat functionality we discussed. This schema assumes a relational database like MySQL and includes foreign key constraints to maintain referential integrity.

sql
Copy code
-- Users
CREATE TABLE User (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    email_address VARCHAR(255) UNIQUE NOT NULL,
    phone_number VARCHAR(20),
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_group_id BIGINT,
    FOREIGN KEY (user_group_id) REFERENCES UserGroup(id)
);

-- User Groups
CREATE TABLE UserGroup (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    permission_set_id BIGINT,
    FOREIGN KEY (permission_set_id) REFERENCES PermissionSet(id)
);

-- Permission Sets
CREATE TABLE PermissionSet (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    permissions TEXT NOT NULL
);

-- Classes
CREATE TABLE Class (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    teacher_id BIGINT,
    FOREIGN KEY (teacher_id) REFERENCES User(id)
);

-- Schedules
CREATE TABLE Schedule (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    class_id BIGINT NOT NULL,
    start_date_and_time DATETIME NOT NULL,
    end_date_and_time DATETIME NOT NULL,
    description TEXT,
    FOREIGN KEY (class_id) REFERENCES Class(id)
);

-- Reports
CREATE TABLE Report (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(id)
);

-- Students
CREATE TABLE Student (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    sid VARCHAR(50) UNIQUE NOT NULL,
    user_id BIGINT NOT NULL,
    university_name VARCHAR(255),
    degree_name VARCHAR(255),
    specialty_name VARCHAR(255),
    year VARCHAR(50),
    group_code VARCHAR(50),
    FOREIGN KEY (user_id) REFERENCES User(id)
);

-- Student Reports
CREATE TABLE StudentReport (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    student_id BIGINT NOT NULL,
    report_id BIGINT NOT NULL,
    FOREIGN KEY (student_id) REFERENCES Student(id),
    FOREIGN KEY (report_id) REFERENCES Report(id)
);

-- Chat Sessions
CREATE TABLE ChatSession (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    session_name VARCHAR(255),
    is_group BOOLEAN NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Messages
CREATE TABLE Message (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    chat_session_id BIGINT NOT NULL,
    sender_id BIGINT NOT NULL,
    message_text TEXT NOT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (chat_session_id) REFERENCES ChatSession(id),
    FOREIGN KEY (sender_id) REFERENCES User(id)
);

-- Chat Participants
CREATE TABLE ChatParticipant (
    chat_session_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (chat_session_id, user_id),
    FOREIGN KEY (chat_session_id) REFERENCES ChatSession(id),
    FOREIGN KEY (user_id) REFERENCES User(id)
);

-- User-specific Chat Settings (optional)
CREATE TABLE UserChat (
    user_id BIGINT NOT NULL,
    chat_session_id BIGINT NOT NULL,
    last_read_at TIMESTAMP,
    notifications_enabled BOOLEAN,
    PRIMARY KEY (user_id, chat_session_id),
    FOREIGN KEY (user_id) REFERENCES User(id),
    FOREIGN KEY (chat_session_id) REFERENCES ChatSession(id)
);

-- Password Reset (optional)
CREATE TABLE PasswordReset (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT NOT NULL,
    reset_token VARCHAR(255) NOT NULL,
    expiration TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(id)
);